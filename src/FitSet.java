import java.util.*;public class FitSet<E extends Fit<E> & Comparable<E>> extends AbstractSet<E> implements Set<E> {    private transient Map<E, Object> backingMap;    private static final Object PRESENT = new Object();    public FitSet() {        super();        this.backingMap = new IdentityHashMap<E, Object>();    }    public FitSet(Collection<? extends E> collection) {        this();        addAll(collection);    }    @Override    public boolean add(E e) {        for (Iterator<E> iterator = this.iterator(); iterator.hasNext();) {            E current = iterator.next();            if (current.equals(e)) {                return backingMap.put(current.getFittest(e), PRESENT) == null;            }        }        return backingMap.put(e, PRESENT) == null;    }    @Override    public boolean addAll(Collection<? extends E> es) {        for (Iterator<? extends E> iterator = es.iterator(); iterator.hasNext();) {            E current = iterator.next();            if(!add(current)){                return false;            }        }        return true;    }    @Override    public Iterator<E> iterator() {        return backingMap.keySet().iterator();    }    @Override    public int size() {        return backingMap.size();    }}