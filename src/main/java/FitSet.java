import java.util.*;public class FitSet<E extends Fit<E> & Comparable<E>> extends AbstractSet<E> implements Set<E> {    private transient Map<E, E> backingMap;    public FitSet() {        super();        this.backingMap = new HashMap<E, E>();    }    public FitSet(Collection<? extends E> collection) {        this();        addAll(collection);    }    @Override    public boolean add(final E e) {        if(e == null)            return false;        final E existing = backingMap.get(e);        if(existing == null)            return backingMap.put(e, e) == null;        return replace(existing, e.getFittest(existing));    }    private boolean replace(final E oldValue, final E newValue) {        if (oldValue == newValue)            return false;        backingMap.remove(oldValue);        return backingMap.put(newValue, newValue) == null;    }    @Override    public Iterator<E> iterator() {        return backingMap.keySet().iterator();    }    @Override    public int size() {        return backingMap.size();    }}